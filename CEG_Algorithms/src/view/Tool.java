/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import Fourier.Fourier;
import Fourier.Mut;
import com.itextpdf.text.log.SysoLogger;
import graph.CEG;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import mcdc.MaskingMCDC;
import mcdc.UniqueMCDC;
import mi.MAXA_new;
import mi.MI;
import mi.MITest;
import mumcut.CUTPNFP;
import mumcut.MAXA;
import mumcut.MNFP;
import mumcut.MUMCUT;
import mumcut.MUTP;
import myers.Myers;
import org.gephi.graph.api.GraphController;
import org.gephi.graph.api.GraphModel;
import org.gephi.graph.api.UndirectedGraph;
import org.gephi.io.importer.api.Container;
import org.gephi.io.importer.api.ImportController;
import org.gephi.io.processor.plugin.DefaultProcessor;
import org.gephi.project.api.ProjectController;
import org.openide.util.Lookup;
import random.RandomTest;
import test.TestInput;
import test.TestSet;

/**
 *
 * @author deniz.kavzak
 */
public class Tool extends javax.swing.JFrame {

    private File file;
    private File outFile;
    private CEG ceg;
    private TestSet testSet;
    private Mut mut;
    private static long startTime;
    private static long endTime;

    /**
     * Creates new form Tool
     */
    public Tool() {
        initComponents();
        ceg = null;
        testSet = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnImport = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listCauses = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listEffects = new javax.swing.JList<>();
        comboAlg = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listTests = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        btnGenerate = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lblNumberTest = new javax.swing.JLabel();
        lblMethodName = new javax.swing.JLabel();
        btnMutationAnalysis = new javax.swing.JButton();
        btnImportTestSet = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(Tool.class, "Tool.title")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnImport, org.openide.util.NbBundle.getMessage(Tool.class, "Tool.text")); // NOI18N
        btnImport.setName(""); // NOI18N
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(listCauses);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(Tool.class, "Tool.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(Tool.class, "Tool.jLabel2.text")); // NOI18N

        jScrollPane2.setViewportView(listEffects);

        comboAlg.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Myers", "MI", "MAX-A", "MUTP", "MNFP", "CUTPNFP", "MUMCUT", "Unique MC/DC", "Masking MC/DC", "Random", "Fourier", "Fourier_4Faults", "All" }));
        comboAlg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboAlgActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(Tool.class, "Tool.jLabel3.text")); // NOI18N

        jScrollPane3.setViewportView(listTests);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(Tool.class, "Tool.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnGenerate, org.openide.util.NbBundle.getMessage(Tool.class, "Tool.btnGenerate.text")); // NOI18N
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnExport, org.openide.util.NbBundle.getMessage(Tool.class, "Tool.btnExport.text")); // NOI18N
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(Tool.class, "Tool.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblNumberTest, org.openide.util.NbBundle.getMessage(Tool.class, "Tool.lblNumberTest.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblMethodName, org.openide.util.NbBundle.getMessage(Tool.class, "Tool.lblMethodName.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnMutationAnalysis, org.openide.util.NbBundle.getMessage(Tool.class, "Tool.btnMutationAnalysis.text")); // NOI18N
        btnMutationAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMutationAnalysisActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnImportTestSet, org.openide.util.NbBundle.getMessage(Tool.class, "Tool.btnImportTestSet.text")); // NOI18N
        btnImportTestSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportTestSetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(389, 389, 389))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(btnImport)
                            .addGap(31, 31, 31)
                            .addComponent(btnImportTestSet)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(comboAlg, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(btnGenerate))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMethodName, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblNumberTest, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(btnMutationAnalysis)
                        .addComponent(btnExport)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboAlg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(btnGenerate))
                        .addGap(28, 28, 28))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnImport)
                            .addComponent(btnImportTestSet))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addGap(3, 3, 3)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(lblMethodName, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(92, 92, 92))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnExport)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnMutationAnalysis)
                                .addGap(33, 33, 33))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(lblNumberTest, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 103, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        File workingDirectory = new File(System.getProperty("user.dir"));
        fileChooser.setCurrentDirectory(workingDirectory);
        fileChooser.setFileFilter(new FileNameExtensionFilter("graphml file", "graphml"));
        int returnVal = fileChooser.showOpenDialog(jPanel1);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            // What to do with the file, e.g. display it in a TextArea
            file = fileChooser.getSelectedFile();

            if (file.getPath().endsWith(".graphml")) {

                ProjectController projectController = Lookup.getDefault().lookup(ProjectController.class);
                projectController.newProject();
                projectController.newWorkspace(projectController.getCurrentProject());
                ImportController importController = Lookup.getDefault().lookup(ImportController.class);
                Container container;
                //String fileName = "C:/Users/deniz.kavzak/Desktop/Thesis/dot/graph-example.graphml";
                //String fileName = "graph-exampleLONG.graphml";
                //String fileName = "graph-example.graphml";
                //File file=new File(fileName);
                try {
                    container = importController.importFile(file);
                    importController.process(container, new DefaultProcessor(), projectController.getCurrentWorkspace());
                    GraphController graphController = Lookup.getDefault().lookup(GraphController.class);
                    GraphModel graphModel = graphController.getModel();
                    UndirectedGraph graph = graphModel.getUndirectedGraph();
                    ceg = new CEG(graph);

                    mut = new Mut(ceg);

                    String[] labels = new String[ceg.getCauseNodes().size()];
                    String[] effects = new String[ceg.getEffectNodes().size()];

                    for (int i = 0; i < ceg.getCauseNodes().size(); i++) {
                        labels[i] = ceg.getCauseNodes().get(i).getLabel();
                        //System.out.println(labels[i]);
                    }

                    for (int i = 0; i < ceg.getEffectNodes().size(); i++) {
                        effects[i] = ceg.getEffectNodes().get(i).getLabel() + "= " + ceg.getEffectNodes().get(i).getRelation().getExpression();
                        //System.out.println(effects[i]);
                    }

                    //DefaultListModel<String> model = new DefaultListModel<>();
                    listCauses.setListData(labels);
                    listEffects.setListData(effects);
                                        
                    //list_causes = new JList<>(labels);
                    //list_effects = new JList<>(effects);
                } catch (FileNotFoundException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }

            }

        } else {
            JOptionPane.showMessageDialog(jPanel1, "Error opening file! ");
        }

    }//GEN-LAST:event_btnImportActionPerformed

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        if (ceg != null) {
            testSet = new TestSet();
            String algorithm = String.valueOf(comboAlg.getSelectedItem());
            lblMethodName.setText(algorithm);
            if (algorithm.equals("Myers")) {
                startTime = System.nanoTime();
                Myers myers = new Myers(ceg);
                testSet = myers.getTs();
                endTime = System.nanoTime();
                System.out.println((endTime-startTime)/1000000000.0);
                //System.out.println("sdf  " + testSet.getTestInputs().size());
                //System.out.println("sdf  " + testSet.getTestSet().size());

            } else if (algorithm.equals("MI")) {
                startTime = System.nanoTime();
                MI mi = new MI(ceg);
                //MITest mi = new MITest(ceg);
                testSet.addTestInputSet(mi.getAllTests());
                endTime = System.nanoTime();
                System.out.println((endTime-startTime)/1000000000.0);
            } else if (algorithm.equals("MAX-A")) {
                startTime = System.nanoTime();
                MAXA maxa = new MAXA(ceg);
                //MAXA_new maxa = new MAXA_new(ceg);
                testSet = maxa.getAllTests(); //getTestSet();
                endTime = System.nanoTime();
                System.out.println((endTime-startTime)/1000000000.0);

            } else if (algorithm.equals("MUTP")) {
                startTime = System.nanoTime();    
                MUTP mutp = new MUTP(ceg);
                testSet = mutp.getTestSet();
                endTime = System.nanoTime();
                System.out.println((endTime-startTime)/1000000000.0);

            } else if (algorithm.equals("MNFP")) {
                startTime = System.nanoTime();
                MNFP mnfp = new MNFP(ceg);
                testSet = mnfp.getTestSet();
                endTime = System.nanoTime();
                System.out.println((endTime-startTime)/1000000000.0);

            } else if (algorithm.equals("CUTPNFP")) {
                startTime = System.nanoTime();
                CUTPNFP cutpnfp = new CUTPNFP(ceg);
                testSet = cutpnfp.getAllTests();
                endTime = System.nanoTime();
                System.out.println((endTime-startTime)/1000000000.0);

            } else if (algorithm.equals("MUMCUT")) {

                startTime = System.nanoTime();             
                MUMCUT mumcut = new MUMCUT(ceg);
                testSet = mumcut.getTestSet();
                endTime = System.nanoTime();
                System.out.println((endTime-startTime)/1000000000.0);
                /*MUTP mutp = new MUTP(ceg);
                MNFP mnfp = new MNFP(ceg);
                CUTPNFP cutpnfp = new CUTPNFP(ceg);

                for (TestInput ti : mutp.getTestSet().getTestInputs()) {
                    testSet.addTestInput(ti);
                }

                for (TestInput ti : mnfp.getTestSet().getTestInputs()) {
                    testSet.addTestInput(ti);
                }

                for (TestInput ti : cutpnfp.getAllTests().getTestInputs()) {
                    testSet.addTestInput(ti);
                }*/

                //testSet.addTestInputList(mutp.getTestSet().getTestInputs());
                //System.out.println(mutp.getTestSet().getTestSet().size());
                //testSet.addTestInputList(mnfp.getTestSet().getTestInputs());
                //System.out.println(mnfp.getTestSet().getTestSet().size());
                //testSet.addTestInputList(cutpnfp.getAllTests().getTestInputs());
                //System.out.println(cutpnfp.getAllTests().getTestSet().size());
            } else if (algorithm.equals("Unique MC/DC")) {
                startTime = System.nanoTime();
                UniqueMCDC umcdc = new UniqueMCDC(ceg);
                testSet = umcdc.getAllTests();
                endTime = System.nanoTime();
                System.out.println((endTime-startTime)/1000000000.0);

            } else if (algorithm.equals("Masking MC/DC")) {
                startTime = System.nanoTime();
                MaskingMCDC mmcdc = new MaskingMCDC(ceg);
                testSet = mmcdc.getAllTests();
                endTime = System.nanoTime();
                System.out.println((endTime-startTime)/1000000000.0);
            } else if (algorithm.equals("Random")) {
                startTime = System.nanoTime();
                RandomTest rt = new RandomTest(ceg);
                testSet = rt.getTests();
                endTime = System.nanoTime();
                System.out.println((endTime-startTime)/1000000000.0);
            } else if (algorithm.equals("Fourier")) {
                startTime = System.nanoTime();
                Fourier f = new Fourier(ceg);
                testSet = f.getTestsForAllEffectsbyFunction(mut);
                endTime = System.nanoTime();
                System.out.println((endTime-startTime)/1000000000.0);
            } else if (algorithm.equals("Fourier_4Faults")) {
                startTime = System.nanoTime();
                Fourier f = new Fourier(ceg);
                testSet = f.getTestsForAllEffectsbyFunction_4Faults(mut);
                endTime = System.nanoTime();
                System.out.println((endTime-startTime)/1000000000.0);
            }else if(algorithm.equals("All")){
                testSet = new TestSet(ceg.getDNFConverter().getAllPossibleValidTestInputs());
                System.out.println("Size: " + testSet.getTestInputs().size());
            }

            /*    String[] tests = new String[testSet.getTestInputs().size()];

            for (int i = 0; i < testSet.getTestInputs().size(); i++) {
                TestInput ti = testSet.getTestInputs().get(i);
                tests[i] = ti.toString();
            }
             */
 /*String[] tests = new String[testSet.getTestInputsAsSet().size()];
            int i = 0;
            //for (TestInput ti : testSet.getTestSet()) {
            for (TestInput ti : testSet.getTestInputsAsSet()) {
                tests[i] = ti.toString();
                i++;
            }*/
 
            testSet.eliminatedTestInputs();
            Set<TestInput> t = testSet.getEliminatedTestSet();
            String[] tests = new String[t.size()];
            int i = 0;
            //for (TestInput ti : testSet.getTestSet()) {
            for (TestInput ti : t) {
                tests[i] = ti.toString();
                i++;
            }

            listTests.setListData(tests);
            lblNumberTest.setText(String.valueOf(tests.length));

        } else {
            JOptionPane.showMessageDialog(jPanel1, "Import a graph first!");
        }

    }//GEN-LAST:event_btnGenerateActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed

        if (testSet != null) {

            JFileChooser fileChooser = new JFileChooser();
            File workingDirectory = new File(System.getProperty("user.dir"));
            fileChooser.setCurrentDirectory(workingDirectory);
            fileChooser.setFileFilter(new FileNameExtensionFilter("xml file", "xml"));
            int returnVal = fileChooser.showSaveDialog(jPanel1);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                // What to do with the file, e.g. display it in a TextArea
                outFile = fileChooser.getSelectedFile();

                BufferedWriter bf;
                try {
                    bf = new BufferedWriter(new FileWriter(outFile));

                    for (TestInput ti : testSet.getEliminatedTestSet()){//getTestInputsAsSet()) {
                        //System.out.println(ti);
                        bf.write(ti.toString());
                        bf.newLine();
                    }

                    bf.close();

                } catch (IOException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }

            } else {
                JOptionPane.showMessageDialog(jPanel1, "Error saving file! ");
            }

        } else {
            JOptionPane.showMessageDialog(jPanel1, "Generate test cases first! ");
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnMutationAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMutationAnalysisActionPerformed
        MutationAnalysis ma = new MutationAnalysis(ceg, lblMethodName.getText(), testSet, mut);
    }//GEN-LAST:event_btnMutationAnalysisActionPerformed

    private void comboAlgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboAlgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboAlgActionPerformed

    private void btnImportTestSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportTestSetActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        File workingDirectory = new File(System.getProperty("user.dir"));
        fileChooser.setCurrentDirectory(workingDirectory);
        //fileChooser.setFileFilter(new FileNameExtensionFilter("graphml file", "graphml"));
        int returnVal = fileChooser.showOpenDialog(jPanel1);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            // What to do with the file, e.g. display it in a TextArea
            file = fileChooser.getSelectedFile();

            testSet = new TestSet();
            testSet = testSet.importFromFile(file);

//            String[] tests = new String[testSet.getTestInputsAsSet().size()];
//            int i = 0;
//            
//            for (TestInput ti : testSet.getTestInputsAsSet()) {
//                tests[i] = ti.toString();
//                i++;
//            }
            Set<TestInput> testInputsAsSet = testSet.getEliminatedTestSet();
            String[] tests = new String[testInputsAsSet.size()];
            int i = 0;
            for (TestInput ti : testInputsAsSet) {
                tests[i] = ti.toString();
                i++;
            }

            listTests.setListData(tests);
            lblNumberTest.setText(String.valueOf(tests.length));

        } else {
            JOptionPane.showMessageDialog(jPanel1, "Error opening file! ");
        }

    }//GEN-LAST:event_btnImportTestSetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tool().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnImportTestSet;
    private javax.swing.JButton btnMutationAnalysis;
    private javax.swing.JComboBox<String> comboAlg;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblMethodName;
    private javax.swing.JLabel lblNumberTest;
    private javax.swing.JList<String> listCauses;
    private javax.swing.JList<String> listEffects;
    private javax.swing.JList<String> listTests;
    // End of variables declaration//GEN-END:variables
}
